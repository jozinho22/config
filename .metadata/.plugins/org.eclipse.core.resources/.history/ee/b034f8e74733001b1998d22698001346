package com.douineau.testspringboot;

import java.util.List;
import java.util.stream.Collectors;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.CommandLineRunner;
import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;
import org.springframework.context.ApplicationContext;
import org.springframework.context.annotation.Bean;
import org.springframework.security.core.authority.SimpleGrantedAuthority;
import org.springframework.security.crypto.password.PasswordEncoder;

import com.douineau.testspringboot.dao.security.PermissionDao;
import com.douineau.testspringboot.dao.security.RoleDao;
import com.douineau.testspringboot.dao.security.UserDao;
import com.douineau.testspringboot.model.security.Permission;
import com.douineau.testspringboot.model.security.Role;
import com.douineau.testspringboot.model.security.User;
import com.douineau.testspringboot.security.enums.ApplicationPermission;
import com.douineau.testspringboot.security.enums.ApplicationRole;
import com.google.common.collect.Lists;
import com.google.common.collect.Sets;

@SpringBootApplication
public class TestSpringbootApplication {
	
	@Autowired
	private RoleDao roleDao;
	@Autowired
	private PermissionDao permDao;
	@Autowired
	private UserDao userDao;
	@Autowired
	private PasswordEncoder passwordEncoder;
	
	public static void main(String[] args) {
		SpringApplication.run(TestSpringbootApplication.class, args);
	}
	
	@Bean
	public CommandLineRunner commandLineRunner(ApplicationContext ctx) {
	    return args -> {
	    	Role roleAdmin = new Role(ApplicationRole.ADMIN.name());
	    	Role roleUser = new Role(ApplicationRole.USER.name());
	    	roleDao.saveAll(Sets.newHashSet(roleAdmin, roleUser));
	    	
	    	Permission permToWrite = new Permission(ApplicationPermission.WRITE.name());
	    	Permission permToRead = new Permission(ApplicationPermission.READ.name());
	    	permDao.saveAll(Sets.newHashSet(permToWrite, permToRead));
	    	
	    	Set<Permission> perms = ApplicationRole.ADMIN.getPermissions()
					.stream()
					.map(appPermission -> new Permission(appPermission.name())
					.collect(Collectors.toSet());
					
	    	User admin = new User(
	    		    "admin",
	    			passwordEncoder.encode("admin"),
	    			true,
	    			true,
	    			true,
	    			true,
	    			Sets.newHashSet(roleAdmin),
	    			Sets.newHashSet(
	    					ApplicationRole.ADMIN.getPermissions()
	    					.stream()
	    						.map(appPermission -> new Permission(appPermission.name())
	    						.collect(Collectors.toSet())
	    			;
	    	
	        
	    };
	}

}
