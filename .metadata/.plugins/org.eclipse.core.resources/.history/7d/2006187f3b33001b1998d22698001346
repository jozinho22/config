package com.douineau.testspringboot.dao.security;

import java.util.Optional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.stereotype.Repository;

import com.douineau.testspringboot.model.security.User;
import com.douineau.testspringboot.security.ApplicationUserDetails;
import com.douineau.testspringboot.security.enums.ApplicationRole;

@Repository("realDao")
public class RealApplicationUserDetailsDaoImpl implements ApplicationUserDetailsDao {

	private final PasswordEncoder passwordEncoder;
	private final UserDao repo;
	
	@Autowired
	public RealApplicationUserDetailsDaoImpl(PasswordEncoder passwordEncoder,
			UserDao repo) {
		super();
		this.passwordEncoder = passwordEncoder;
		this.repo = repo;
	}

	@Override
	public Optional<ApplicationUserDetails> findUserDetailsByUsername(String username) {
		
		Optional<User> userMayBe = repo.findByName(username);
		if(userMayBe.isPresent()) {
			User u = userMayBe.get();
			ApplicationUserDetails userDetails = new ApplicationUserDetails(
					u.getName(),
					passwordEncoder.encode(u.getPassword()),
					u.isAccountNonExpired(),
					u.isAccountNonLocked(),
					u.isCredentialsNonExpired()
					u.isEnabled(),
					u.getAuthorities()
					);
		}
		
		return getApplicationUserDetails()
				.stream()
				.filter(applicationUser -> applicationUser.getUsername().equals(username))
				.findFirst();
	}

	
}
